/**
 * @copyright 2013 Sonia Keys
 * @copyright 2016 commenthol
 * @license MIT
 * @module node
 */
/**
 * Node: Chapter 39, Passages through the Nodes.
 */

import base from './base';

/**
 * EllipticAscending computes time and distance of passage through the ascending node of a body in an elliptical orbit.
 *
 * Argument axis is semimajor axis in AU, ecc is eccentricity, argP is argument
 * of perihelion in radians, timeP is time of perihelion as a jd.
 *
 * Result is jde of the event and distance from the sun in AU.
 */
export function ellipticAscending(axis, ecc, argP, timeP) {
  // (axis, ecc, argP, timeP float64)  (jde, r float64)
  return el(-argP, axis, ecc, timeP);
}

/**
 * EllipticAscending computes time and distance of passage through the descending node of a body in an elliptical orbit.
 *
 * Argument axis is semimajor axis in AU, ecc is eccentricity, argP is argument
 * of perihelion in radians, timeP is time of perihelion as a jd.
 *
 * Result is jde of the event and distance from the sun in AU.
 */
export function ellipticDescending(axis, ecc, argP, timeP) {
  // (axis, ecc, argP, timeP float64)  (jde, r float64)
  return el(Math.PI - argP, axis, ecc, timeP);
}

export function el(ν, axis, ecc, timeP) {
  // (ν, axis, ecc, timeP float64)  (jde, r float64)
  var E = 2 * Math.atan(Math.sqrt((1 - ecc) / (1 + ecc)) * Math.tan(ν * 0.5));

  var _base$sincos = base.sincos(E),
      sE = _base$sincos[0],
      cE = _base$sincos[1];

  var M = E - ecc * sE;
  var n = base.K / axis / Math.sqrt(axis);
  var jde = timeP + M / n;
  var r = axis * (1 - ecc * cE);
  return [jde, r];
}

/**
 * ParabolicAscending computes time and distance of passage through the ascending node of a body in a parabolic orbit.
 *
 * Argument q is perihelion distance in AU, argP is argument of perihelion
 * in radians, timeP is time of perihelion as a jd.
 *
 * Result is jde of the event and distance from the sun in AU.
 */
export function parabolicAscending(q, argP, timeP) {
  // (q, argP, timeP float64)  (jde, r float64)
  return pa(-argP, q, timeP);
}

/**
 * ParabolicDescending computes time and distance of passage through the descending node of a body in a parabolic orbit.
 *
 * Argument q is perihelion distance in AU, argP is argument of perihelion
 * in radians, timeP is time of perihelion as a jd.
 *
 * Result is jde of the event and distance from the sun in AU.
 */
export function parabolicDescending(q, argP, timeP) {
  // (q, argP, timeP float64)  (jde, r float64)
  return pa(Math.PI - argP, q, timeP);
}

export function pa(ν, q, timeP) {
  // (ν, q, timeP float64)  (jde, r float64)
  var s = Math.tan(ν * 0.5);
  var jde = timeP + 27.403895 * s * (s * s + 3) * q * Math.sqrt(q);
  var r = q * (1 + s * s);
  return [jde, r];
}

export default {
  ellipticAscending: ellipticAscending,
  ellipticDescending: ellipticDescending,
  el: el,
  parabolicAscending: parabolicAscending,
  parabolicDescending: parabolicDescending,
  pa: pa
};