function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @copyright 2016 commenthol
 * @license MIT
 * @module vsop87
 */
/**
 * Converts VSOP87 data files to javascript modules
 */

import fs from 'fs';
import path from 'path';

var REGVSOP = /^\sVSOP87.*VARIABLE (\d) \((LBR|XYZ)\).{1,20}\*T\*\*(\d)\s{1,20}(\d{1,20}) TERMS/;

// planet names in VSOP87 files
var planets = ['mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune'];

// VSOP planet extension names
var exts = ['mer', 'ven', 'ear', 'mar', 'jup', 'sat', 'ura', 'nep'];

var toFloat = function toFloat(f) {
  return parseFloat(f, 10);
};

export var VSOP = function () {
  /**
   * load VSOP87 planet data from VSOP87 files
   * Data can be obtained from ftp://cdsarc.u-strasbg.fr/pub/cats/VI%2F81/
   * @throws {Error}
   * @param {String} planet - MERCURY VENUS EARTH MARS JUPITER SATURN URANUS NEPTUNE
   * @param {String} dirname - folder containing VSOP87 files
   * @param {Object} [opts]
   * @param {String} [opts.type] - file type A, B, C, D - See vsop87.txt
   */
  function VSOP(planet, dirname, opts) {
    _classCallCheck(this, VSOP);

    planet = planet.toLowerCase();
    if (~planets.indexOf(planet)) {
      opts = opts || {};
      this.planet = planet;
      this.dirname = dirname;
      this.type = opts.type || 'B'; // HELIOCENTRIC DYNAMICAL ECLIPTIC AND EQUINOX J2000
    } else {
      throw new Error('Invalid planet ' + planet);
    }
  }

  /** get file extension for planet */


  VSOP.prototype._getExt = function _getExt() {
    return exts[planets.indexOf(this.planet)];
  };

  /** load data from file */


  VSOP.prototype.load = function load(cb) {
    var _this = this;

    var ext = this._getExt();
    var filename = path.resolve(this.dirname, 'VSOP87' + this.type + '.' + ext);
    fs.readFile(filename, 'utf8', function (err, data) {
      if (!err) {
        _this.parse(data);
      }
      cb(err);
    });
  };

  /** sync loading */


  VSOP.prototype.loadSync = function loadSync() {
    var ext = this._getExt();
    var filename = path.resolve(this.dirname, 'VSOP87' + this.type + '.' + ext);
    var data = fs.readFileSync(filename, 'utf8');
    this.parse(data);
  };

  /**
   * parse data
   * @param {String} data - content of VSOP file
   */


  VSOP.prototype.parse = function parse(data) {
    var _this2 = this;

    this.data = {};
    var lines = data.split(/\n/);
    var varName = void 0;
    var ref = void 0;

    lines.forEach(function (line) {
      if (REGVSOP.test(line)) {
        var _line$match = line.match(REGVSOP),
            varCnt = _line$match[1],
            type = _line$match[2],
            pos = _line$match[3];

        varName = type.split('')[varCnt - 1];
        if (!_this2.data[varName]) _this2.data[varName] = {};
        ref = _this2.data[varName][pos] = [];
      } else {
        if (line.length > 79) {
          ref.push([toFloat(line.substr(79, 97).trim()), toFloat(line.substr(98, 111).trim()), toFloat(line.substr(111, 131).trim())]);
        }
      }
    });
  };

  /**
   * get parsed data
   * @return {Object}
   * ```js
   * { L: { '0': [[<A>, <B>, <C>], ...], '1': [], '2': [], '3': [], '4': [], '5': [] },
   *   B: { '0': [], '1': [], '2': [], '3': [], '4': [], '5': [] },
   *   R: { '0': [], '1': [], '2': [], '3': [], '4': [], '5': [] } }
   * ```
   */


  VSOP.prototype.getData = function getData() {
    return this.data;
  };

  return VSOP;
}();

export default {
  VSOP: VSOP
};