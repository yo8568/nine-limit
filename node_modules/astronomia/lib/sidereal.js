'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iau82 = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
copyright 2013 Sonia Keys
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * @copyright 2016 commenthol
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * @license MIT
module sidereal

/**
 * Sidereal: Chapter 12, Sidereal Time at Greenwich.
 */

exports.JDToCFrac = JDToCFrac;
exports.mean = mean;
exports.mean0UT = mean0UT;
exports.apparent = apparent;
exports.apparent0UT = apparent0UT;

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _nutation = require('./nutation');

var _nutation2 = _interopRequireDefault(_nutation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * JDToCFrac returns values for use in computing sidereal time at Greenwich.
 *
 * Cen is centuries from J2000 of the JD at 0h UT of argument jd.  This is
 * the value to use for evaluating the IAU sidereal time polynomial.
 * DayFrac is the fraction of jd after 0h UT.  It is used to compute the
 * final value of sidereal time.
 *
 * @param {number} jd - Julian Days
 * @return {number[]} [century, fraction] century and fraction of jd after 0h UT
 */
function JDToCFrac(jd) {
  var _base$modf = _base2.default.modf(jd + 0.5),
      _base$modf2 = _slicedToArray(_base$modf, 2),
      j0 = _base$modf2[0],
      f = _base$modf2[1];

  return [_base2.default.J2000Century(j0 - 0.5), f]; // (cen, dayFrac /* float */)
}

/**
 * iau82 is a polynomial giving mean sidereal time at Greenwich at 0h UT.
 *
 * The polynomial is in centuries from J2000.0, as given by JDToCFrac.
 * Coefficients are those adopted in 1982 by the International Astronomical
 * Union and are given in (12.2) p. 87.
 */
var iau82 = exports.iau82 = [24110.54841, 8640184.812866, 0.093104, -0.0000062];

/**
 * Mean returns mean sidereal time at Greenwich for a given JD.
 *
 * Computation is by IAU 1982 coefficients.  The result is in seconds of
 * time and is in the range [0,86400).
 *
 * @param {number} jd - Julian Days
 * @return {number}
 */
function mean(jd) {
  return _base2.default.pmod(_mean(jd), 86400);
}

/**
 * @private
 */
function _mean(jd) {
  var _mean0UT2 = _mean0UT(jd),
      _mean0UT3 = _slicedToArray(_mean0UT2, 2),
      s = _mean0UT3[0],
      f = _mean0UT3[1];

  return s + f * 1.00273790935 * 86400;
}

/**
 * Mean0UT returns mean sidereal time at Greenwich at 0h UT on the given JD.
 *
 * The result is in seconds of time and is in the range [0,86400).
 *
 * @param {number} jd - Julian Days
 * @return {number}
 */
function mean0UT(jd /* float */) {
  var _mean0UT4 = _mean0UT(jd),
      _mean0UT5 = _slicedToArray(_mean0UT4, 2),
      s = _mean0UT5[0],
      _ = _mean0UT5[1]; // eslint-disable-line


  return _base2.default.pmod(s, 86400);
}

/**
 * @private
 */
function _mean0UT(jd /* float */) {
  var _JDToCFrac = JDToCFrac(jd),
      _JDToCFrac2 = _slicedToArray(_JDToCFrac, 2),
      cen = _JDToCFrac2[0],
      f = _JDToCFrac2[1];
  // (12.2) p. 87


  return [_base2.default.horner.apply(_base2.default, [cen].concat(iau82)), f]; // (sidereal, dayFrac /* float */)
}

/**
 * Apparent returns apparent sidereal time at Greenwich for the given JD.
 *
 * Apparent is mean plus the nutation in right ascension.
 *
 * The result is in seconds of time and is in the range [0,86400).
 *
 * @param {number} jd - Julian Days
 * @return {number}
 */
function apparent(jd) {
  var s = _mean(jd); // seconds of time
  var n = _nutation2.default.nutationInRA(jd); // angle (radians) of RA
  var ns = n * 3600 * 180 / Math.PI / 15; // convert RA to time in seconds
  return _base2.default.pmod(s + ns, 86400);
}

/**
 * Apparent0UT returns apparent sidereal time at Greenwich at 0h UT
 * on the given JD.
 *
 * The result is in seconds of time and is in the range [0,86400).
 *
 * @param {number} jd - Julian Days
 * @return {number}
 */
function apparent0UT(jd) {
  var _base$modf3 = _base2.default.modf(jd + 0.5),
      _base$modf4 = _slicedToArray(_base$modf3, 2),
      j0 = _base$modf4[0],
      f = _base$modf4[1];

  var cen = (j0 - 0.5 - _base2.default.J2000) / 36525;
  var s = _base2.default.horner.apply(_base2.default, [cen].concat(iau82)) + f * 1.00273790935 * 86400;
  var n = _nutation2.default.nutationInRA(j0); // angle (radians) of RA
  var ns = n * 3600 * 180 / Math.PI / 15; // convert RA to time in seconds
  return _base2.default.pmod(s + ns, 86400);
}

exports.default = {
  JDToCFrac: JDToCFrac,
  iau82: iau82,
  mean: mean,
  mean0UT: mean0UT,
  apparent: apparent,
  apparent0UT: apparent0UT
};